package ressources;

// <editor-fold defaultstate="collapsed" desc="IMPORTATIONS">
import java.awt.Frame;
import java.awt.Toolkit;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.Utilities;
// </editor-fold>

/**
 * Cette classe reprèsente le TP Bloc-Notes dans son ensemble.
 * A savoir la reproduction du logiciel Bloc-Notes de Windows.
 * @author AGHUMYAN Mesrop
 * @version 1.0
 */
public class BlocNotes extends javax.swing.JFrame {

// <editor-fold defaultstate="collapsed" desc="ATTRIBUTS & VARIABLES PERSONNALISE">
    /**
     * L'objet {@link #initialTextBox} se met à jour en fonction de: - ouverture/création d'un nouveau fichier
     *                                                             - enregistrement des modifications du fichier
     *                                                             - enregistrement sous... des modifications du fichier
     */
    String initialTextBox = "";
    
    /**
     * Les options possibles des classes JOptionPane
     */
    Object[] options = {"Enregistrer", "Ne pas enregistrer", "Annuler"};
    Object[] options2 = {"Oui", "Non"};
    Object[] options3 = {"OK"};
    
    /**
     * Le fichier par défaut à l'ouverture du Bloc-Notes est un fichier null car
     * elle n'est pas enregistrée par défaut. Ce fichier est representé par : {@link #initialFile}
     */
    File initialFile = null;
    
    /**
     * Le titre par défaut si le fichier n'est pas enregistré est "Sans titre" représenté par : {@link #fileTitle}
     * Ce dernier est suivi par la valeur constante de "Bloc-Notes" qui est le nom du logiciel représenté par : {@link #frameTitle}
     */
    final String frameTitle = " - Bloc-Notes";
    String fileTitle = "Sans titre";
// </editor-fold>
    
// <editor-fold defaultstate="collapsed" desc="CONSTRUCTEUR">
    public BlocNotes() {
        initComponents();
        this.setTitle(fileTitle + frameTitle);
        this.setIconImage(Toolkit.getDefaultToolkit().getImage("notepad.png"));
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }
// </editor-fold>
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelTextBox = new javax.swing.JPanel();
        panelScrollTextBox = new javax.swing.JScrollPane();
        textBoxArea = new javax.swing.JTextArea();
        panelBottom2 = new javax.swing.JPanel();
        panelBottom3 = new javax.swing.JPanel();
        lblCharacterEncoding = new javax.swing.JLabel();
        panelBottom4 = new javax.swing.JPanel();
        lblCarriageReturnLineFeed = new javax.swing.JLabel();
        panelBottom5 = new javax.swing.JPanel();
        lblZoom = new javax.swing.JLabel();
        panelBottom7 = new javax.swing.JPanel();
        lblColRow = new javax.swing.JLabel();
        toolbar = new javax.swing.JMenuBar();
        fileItem = new javax.swing.JMenu();
        newFileItem = new javax.swing.JMenuItem();
        newWindowItem = new javax.swing.JMenuItem();
        openItem = new javax.swing.JMenuItem();
        saveItem = new javax.swing.JMenuItem();
        saveAsItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        layoutItem = new javax.swing.JMenuItem();
        printItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        leaveItem = new javax.swing.JMenuItem();
        editItem = new javax.swing.JMenu();
        cancelItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        cutItem = new javax.swing.JMenuItem();
        copyItem = new javax.swing.JMenuItem();
        pasteItem = new javax.swing.JMenuItem();
        deleteItem = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        searchWithBingItem = new javax.swing.JMenuItem();
        searchItem = new javax.swing.JMenuItem();
        searchNextItem = new javax.swing.JMenuItem();
        searchPreviousItem = new javax.swing.JMenuItem();
        replaceItem = new javax.swing.JMenuItem();
        reachItemItem = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        selectAllItem = new javax.swing.JMenuItem();
        hourDateItem = new javax.swing.JMenuItem();
        formatItem = new javax.swing.JMenu();
        lineWrapItem = new javax.swing.JCheckBoxMenuItem();
        policeItem = new javax.swing.JMenuItem();
        displayItem = new javax.swing.JMenu();
        zoomItem = new javax.swing.JMenu();
        statusBarItem = new javax.swing.JCheckBoxMenuItem();
        helpItem = new javax.swing.JMenu();
        displayHelpItem = new javax.swing.JMenuItem();
        sendCommentItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        timelyItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        panelScrollTextBox.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        panelScrollTextBox.setToolTipText("");
        panelScrollTextBox.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        textBoxArea.setBackground(new java.awt.Color(255, 255, 255));
        textBoxArea.setColumns(20);
        textBoxArea.setFont(textBoxArea.getFont().deriveFont(textBoxArea.getFont().getSize()+2f));
        textBoxArea.setRows(5);
        textBoxArea.setDoubleBuffered(true);
        textBoxArea.setName(""); // NOI18N
        textBoxArea.setSelectionColor(new java.awt.Color(51, 102, 255));
        textBoxArea.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                textBoxAreaCaretUpdate(evt);
            }
        });
        panelScrollTextBox.setViewportView(textBoxArea);

        javax.swing.GroupLayout panelTextBoxLayout = new javax.swing.GroupLayout(panelTextBox);
        panelTextBox.setLayout(panelTextBoxLayout);
        panelTextBoxLayout.setHorizontalGroup(
            panelTextBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelScrollTextBox)
        );
        panelTextBoxLayout.setVerticalGroup(
            panelTextBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelScrollTextBox, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
        );

        panelBottom2.setBackground(new java.awt.Color(214, 217, 223));
        panelBottom2.setVisible(false);

        panelBottom3.setBackground(new java.awt.Color(214, 217, 223));
        panelBottom3.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 0, 0, new java.awt.Color(204, 204, 204)));

        lblCharacterEncoding.setBackground(new java.awt.Color(214, 217, 223));
        lblCharacterEncoding.setForeground(new java.awt.Color(0, 0, 0));
        lblCharacterEncoding.setText("UTF-8");

        javax.swing.GroupLayout panelBottom3Layout = new javax.swing.GroupLayout(panelBottom3);
        panelBottom3.setLayout(panelBottom3Layout);
        panelBottom3Layout.setHorizontalGroup(
            panelBottom3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBottom3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCharacterEncoding, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelBottom3Layout.setVerticalGroup(
            panelBottom3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBottom3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCharacterEncoding)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        panelBottom4.setBackground(new java.awt.Color(214, 217, 223));
        panelBottom4.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 0, 0, new java.awt.Color(204, 204, 204)));

        lblCarriageReturnLineFeed.setForeground(new java.awt.Color(0, 0, 0));
        lblCarriageReturnLineFeed.setText("Windows (CRLF)");

        javax.swing.GroupLayout panelBottom4Layout = new javax.swing.GroupLayout(panelBottom4);
        panelBottom4.setLayout(panelBottom4Layout);
        panelBottom4Layout.setHorizontalGroup(
            panelBottom4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBottom4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblCarriageReturnLineFeed, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelBottom4Layout.setVerticalGroup(
            panelBottom4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBottom4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCarriageReturnLineFeed)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelBottom5.setBackground(new java.awt.Color(214, 217, 223));
        panelBottom5.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 0, 0, new java.awt.Color(204, 204, 204)));

        lblZoom.setForeground(new java.awt.Color(0, 0, 0));
        lblZoom.setText("100%");

        javax.swing.GroupLayout panelBottom5Layout = new javax.swing.GroupLayout(panelBottom5);
        panelBottom5.setLayout(panelBottom5Layout);
        panelBottom5Layout.setHorizontalGroup(
            panelBottom5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBottom5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblZoom, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelBottom5Layout.setVerticalGroup(
            panelBottom5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBottom5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblZoom)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelBottom7.setBackground(new java.awt.Color(214, 217, 223));
        panelBottom7.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 0, 0, new java.awt.Color(204, 204, 204)));

        lblColRow.setForeground(new java.awt.Color(0, 0, 0));
        lblColRow.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblColRow.setText("Ln 1, Col1");

        javax.swing.GroupLayout panelBottom7Layout = new javax.swing.GroupLayout(panelBottom7);
        panelBottom7.setLayout(panelBottom7Layout);
        panelBottom7Layout.setHorizontalGroup(
            panelBottom7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBottom7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblColRow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(33, 33, 33))
        );
        panelBottom7Layout.setVerticalGroup(
            panelBottom7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBottom7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblColRow)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelBottom2Layout = new javax.swing.GroupLayout(panelBottom2);
        panelBottom2.setLayout(panelBottom2Layout);
        panelBottom2Layout.setHorizontalGroup(
            panelBottom2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBottom2Layout.createSequentialGroup()
                .addContainerGap(394, Short.MAX_VALUE)
                .addComponent(panelBottom7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(panelBottom5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(panelBottom4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(panelBottom3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelBottom2Layout.setVerticalGroup(
            panelBottom2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBottom3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelBottom4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelBottom5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelBottom7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        toolbar.setBorder(null);
        toolbar.setBorderPainted(false);

        fileItem.setText("Fichier");

        newFileItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        newFileItem.setText("Nouveau");
        newFileItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileItemActionPerformed(evt);
            }
        });
        fileItem.add(newFileItem);

        newWindowItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        newWindowItem.setText("Nouvelle fenêtre");
        newWindowItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newWindowItemActionPerformed(evt);
            }
        });
        fileItem.add(newWindowItem);

        openItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openItem.setText("Ouvrir...");
        openItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openItemActionPerformed(evt);
            }
        });
        fileItem.add(openItem);

        saveItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveItem.setText("Enregistrer");
        saveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveItemActionPerformed(evt);
            }
        });
        fileItem.add(saveItem);

        saveAsItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveAsItem.setText("Enregistrer sous...");
        saveAsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsItemActionPerformed(evt);
            }
        });
        fileItem.add(saveAsItem);
        fileItem.add(jSeparator2);

        layoutItem.setText("Mise en page...");
        layoutItem.setEnabled(false);
        fileItem.add(layoutItem);

        printItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        printItem.setText("Imprimer...");
        printItem.setEnabled(false);
        fileItem.add(printItem);
        fileItem.add(jSeparator1);

        leaveItem.setText(" Quitter");
        leaveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leaveItemActionPerformed(evt);
            }
        });
        fileItem.add(leaveItem);

        toolbar.add(fileItem);

        editItem.setText("Edition");

        cancelItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        cancelItem.setText("Annuler");
        editItem.add(cancelItem);
        editItem.add(jSeparator4);

        cutItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        cutItem.setText("Couper");
        cutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutItemActionPerformed(evt);
            }
        });
        editItem.add(cutItem);

        copyItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        copyItem.setText("Copier");
        copyItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyItemActionPerformed(evt);
            }
        });
        editItem.add(copyItem);

        pasteItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        pasteItem.setText("Coller");
        pasteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteItemActionPerformed(evt);
            }
        });
        editItem.add(pasteItem);

        deleteItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        deleteItem.setText("Supprimer");
        deleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteItemActionPerformed(evt);
            }
        });
        editItem.add(deleteItem);
        editItem.add(jSeparator5);

        searchWithBingItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        searchWithBingItem.setText("Recherche avec Bing...");
        searchWithBingItem.setEnabled(false);
        editItem.add(searchWithBingItem);

        searchItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        searchItem.setText("Rechercher...");
        searchItem.setEnabled(false);
        editItem.add(searchItem);

        searchNextItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        searchNextItem.setText("Rechercher le suivant");
        searchNextItem.setEnabled(false);
        editItem.add(searchNextItem);

        searchPreviousItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        searchPreviousItem.setText("Rechercher le précédent");
        searchPreviousItem.setEnabled(false);
        editItem.add(searchPreviousItem);

        replaceItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        replaceItem.setText("Remplacer...");
        replaceItem.setEnabled(false);
        editItem.add(replaceItem);

        reachItemItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        reachItemItem.setText("Atteindre...");
        reachItemItem.setEnabled(false);
        editItem.add(reachItemItem);
        editItem.add(jSeparator6);

        selectAllItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        selectAllItem.setText("Sélectionner tout");
        selectAllItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllItemActionPerformed(evt);
            }
        });
        editItem.add(selectAllItem);

        hourDateItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        hourDateItem.setText("Heure/Date");
        hourDateItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hourDateItemActionPerformed(evt);
            }
        });
        editItem.add(hourDateItem);

        toolbar.add(editItem);

        formatItem.setText("Format");

        lineWrapItem.setText("Retour automatique à la ligne");
        lineWrapItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineWrapItemActionPerformed(evt);
            }
        });
        formatItem.add(lineWrapItem);

        policeItem.setText("Police");
        policeItem.setEnabled(false);
        formatItem.add(policeItem);

        toolbar.add(formatItem);

        displayItem.setText("Affichage");

        zoomItem.setText("Zoom");
        zoomItem.setEnabled(false);
        displayItem.add(zoomItem);

        statusBarItem.setText("Barre d'état");
        statusBarItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusBarItemActionPerformed(evt);
            }
        });
        displayItem.add(statusBarItem);

        toolbar.add(displayItem);

        helpItem.setText("Aide");

        displayHelpItem.setText("Afficher l'aide");
        displayHelpItem.setEnabled(false);
        helpItem.add(displayHelpItem);

        sendCommentItem.setText("Envoyer des commentaires");
        sendCommentItem.setEnabled(false);
        helpItem.add(sendCommentItem);
        helpItem.add(jSeparator3);

        timelyItem.setText("A propos du Bloc-Notes");
        timelyItem.setEnabled(false);
        helpItem.add(timelyItem);

        toolbar.add(helpItem);

        setJMenuBar(toolbar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTextBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelBottom2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelTextBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(panelBottom2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setBounds(0, 0, 798, 442);
    }// </editor-fold>//GEN-END:initComponents
    
// <editor-fold defaultstate="collapsed" desc="METHODES">
    
    /**
     * Dialogue demendant à l'utilisateur s'il veut enregistrer ces modifications.
     * @return res correspond à la réponse de l'utilisateur au dialogue.
     */
    private int saveShowOptionDialog() {
        int res = JOptionPane.showOptionDialog(null,
            "Voulez-vous enregistrer les modifications de " + fileTitle + " ?",
            "Bloc-Notes",
            JOptionPane.YES_NO_CANCEL_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            options,
            options[0]);
        
        return res;
    }
    
    private void saveAsShowOptionDialog(int res, JFileChooser chooser) {
        UIManager.put("chooser.saveButtonText","Enregistrer");
        UIManager.put("chooser.cancelButtonText","Annuler");
        chooser.setDialogTitle("Enregistrer sous");
        chooser.addChoosableFileFilter(new FileNameExtensionFilter("Fichier TXT (*.txt)", "txt"));
        chooser.setFileFilter(chooser.getChoosableFileFilters()[0]);
        res = chooser.showSaveDialog(this);
    }
    
    private void openShowOptionDialog(int res, JFileChooser chooser) {
        UIManager.put("chooser.cancelButtonText","Annuler");
        chooser.setDialogTitle("Ouvrir");
        chooser.addChoosableFileFilter(new FileNameExtensionFilter("Fichier TXT (*.txt)", "txt"));
        chooser.setApproveButtonText("Ouvrir");

        res = chooser.showOpenDialog(this);
    }
    
    private int fileAlreadyExistShowOptionDialog() {
        int res = JOptionPane.showOptionDialog(null,
                    initialFile.getName() + " existe déjà.\nVoulez vous le remplacer ?",
                    "Confirmer l'enregistrement",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE,
                    null,
                    options2,
                    options2[0]);
        
        return res;
    }
    
    private void fileNotExistShowOptionDialog() {
        int res = JOptionPane.showOptionDialog(null,
        initialFile.getName() + "\nFichier introuvable.\nVérifiez le nom du fichier et réessayez.",
        "Ouvrir",
        JOptionPane.YES_OPTION,
        JOptionPane.WARNING_MESSAGE,
        null,
        options3,
        options3[0]);
    }
    
    /**
     * Méthode permettant d'initialisé le titre du frame -> Sans titre - Bloc-Notes.
     */
    private void initializationOfFile() {
        /* Dans le cas où l'on créer un nouveau fichier vierge */
        if(initialFile == null) {
            textBoxArea.setText("");
            fileTitle = "Sans titre";
            setTitle(fileTitle + frameTitle);
            initialTextBox = textBoxArea.getText();
        }
        /* Dans le cas où le fichier existe */
        else if(initialFile != null) {
            fileTitle = initialFile.getName();
            setTitle(fileTitle + frameTitle);
            initialTextBox = textBoxArea.getText();
        }
    }
    
    /**
     * Méthode peremettant d'enregistrer les nouvelles modifications d'un fichier existant.
     * Si le fichier n'existe pas la méthode appele la fonction saveAs().
     */
    private void save() {
        /* Dans le cas où le fichier n'existe pas on applique la méthode saveAs(). */
        if(initialFile == null) {
            saveAs();
        }
        // Dans le cas où le fichier existe.
        else if(initialFile != null) {
            try {
                FileWriter lu = new FileWriter(initialFile);
                try (BufferedWriter out = new BufferedWriter(lu)) {
                    out.write(textBoxArea.getText());
                }
                initializationOfFile(); /* Pour que "*" dans le titre disparait */
            } catch (IOException ex) {
                System.err.println("Erreur : il est impossible d'enregistrer dans " + initialFile.getName());
            }
        }
    }
    
    private void saveAs() {
        int res = 0;
        JFileChooser chooser = new JFileChooser();
        
        saveAsShowOptionDialog(res, chooser);
        
        // Dans le cas où l'utilisateur souhaite enregistrer sous... le fichier.
        if(chooser.getSelectedFile() != null) {
            initialFile = chooser.getSelectedFile();
            /* Dans le cas où le fichier enregistrer n'est pas enregistrer manuellement en .txt par l'utilisateur. */
            if(!initialFile.getName().toLowerCase().endsWith(".txt")) {
                initialFile = new File(initialFile.getParentFile(), initialFile.getName() + ".txt");
            }
            try {
                /* Dans le cas où le nom du fichier que l'utilisateur souhaite donner est déjà attribuer. */
                if(initialFile.exists()) {
                    int n;
                    do{ /* Utilisation d'une boucle do..while() au cas où si l'utilisateur sélectionne plusieurs fois le btn Non */
                        n = fileAlreadyExistShowOptionDialog();
                        /* Dans le cas où l'utilisateur souhaite écraser le fichier existant pour le remplacer par le nouveau fichier. */
                        if(n == JOptionPane.YES_OPTION && initialFile.exists()) {
                            textBoxArea.write(new OutputStreamWriter(new FileOutputStream(initialFile), "utf-8"));
                            initializationOfFile();
                        }
                        /* Dans le cas où l'utilisateur ne souhaite pas écraser le fichier existant. */
                        else if(n == JOptionPane.NO_OPTION && initialFile.exists()) {
                            saveAsShowOptionDialog(res, chooser);
                            initialFile = chooser.getSelectedFile();
                            if(!initialFile.getName().toLowerCase().endsWith(".txt")) {
                                initialFile = new File(initialFile.getParentFile(), initialFile.getName() + ".txt");
                            }
                        }
                    }while(n == JOptionPane.NO_OPTION && initialFile.exists() || n != JOptionPane.YES_OPTION);
                    
                    initializationOfFile();
                    
                }
                /* Dans le cas où le nom du fichier que l'utilisateur souhaite donner n'est pas déjà donner */
                else if(!initialFile.exists()) {
                    textBoxArea.write(new OutputStreamWriter(new FileOutputStream(initialFile), "utf-8"));
                    initializationOfFile();
                }
                
            } catch (IOException e) {
                System.out.println("Erreur : impossible d'enregistrer le fichier ");
            }
        }
        /* Dans le cas où l'utilisateur annule l'opération d'enregistrer sous le fichier */
        else {
            System.out.println("Opération d'enregistrement annulé.");
        }
    }
    
    /**
     * La classe {@link #newWindowItemActionPerformed(java.awt.event.ActionEvent)} permet de gérer la création de nouvelles fenêtres.
     * @param evt correspond au ActionEvent utilisé.
     */
    private void newWindowItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newWindowItemActionPerformed
        Frame newWindow = new BlocNotes();
        newWindow.setVisible(true);
    }//GEN-LAST:event_newWindowItemActionPerformed

    /**
     * La classe {@link #newFileItemActionPerformed(java.awt.event.ActionEvent)}
     * permet de gérer la création d'un nouveau fichier graçe à l'utilisation de l'item : {@link #newFileItem}
     * @param evt correspond au ActionEvent utilisé.
     */
    private void newFileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileItemActionPerformed
        /* Dans le cas où le fichier n'existe pas mais qu'il y à eu des modifications de texte. */
        if(initialFile == null && !textBoxArea.getText().equals(initialTextBox)) {
            int res = saveShowOptionDialog();
            
            /* Dans le cas où l'utilisateur souhaite enregistrer ces modifications avant de créer un nouveau fichier. */
            if(res == JOptionPane.YES_OPTION) {
                save();
                initialFile = null;
                initializationOfFile();
            }
            /* Dans le cas où l'utilisateur ne souhaite pas enregistrer ces modifications avant de créer un nouveau fichier. */
            else if(res == JOptionPane.NO_OPTION) {
                initialFile = null;
                initializationOfFile();
            }
            /* Dans le cas où l'utilisateur souhaite annuler l'opération de création de nouveau fichier. */
            else if(res == JOptionPane.CANCEL_OPTION) {
                System.out.println("Opération de création de fichier annulé.");
            }
        }
        /* Dans le cas où le fichier existe mais qu'il n'y a pas eu de modification */
        else if(initialFile != null && textBoxArea.getText().equals(initialTextBox)) {
            initialFile = null;
            initializationOfFile();
        }
        // Dans le cas où le fichier existe mais qu'il y a eu des modifications de texte.
        else if(initialFile != null && !textBoxArea.getText().equals(initialTextBox)) {
            int res = saveShowOptionDialog();
            
            /* Dans le cas où l'utilisateur souhaite enregistrer ces modifications avant de créer un nouveau fichier. */
            if(res == JOptionPane.YES_OPTION) {
                save();
                initialFile = null;
                initializationOfFile();
            }
            /* Dans le cas où l'utilisateur ne souhaite pas enregistrer ces modifications avant de créer un nouveau fichier. */
            else if(res == JOptionPane.NO_OPTION) {
                initialFile = null;
                initializationOfFile();
            }
            /* Dans le cas où l'utilisateur souhaite annuler l'opération de création de nouveau fichier. */
            else if(res == JOptionPane.CANCEL_OPTION) {
                System.out.println("Opération de création de fichier annulé.");
            }
        }
    }//GEN-LAST:event_newFileItemActionPerformed

    /**
     * La classe {@link #saveItemActionPerformed(java.awt.event.ActionEvent)}
     * permet d'enregistrer les modifications d'un fichier existant graçe à sa
     * méthode {@link #save()}. Néanmoins si le fichier n'existe pas ce
     * dernier renvoie à la méthode {@link #saveAs()}.
     * @param evt correspond au ActionEvent utilisé.
     */
    private void saveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveItemActionPerformed
        save();
    }//GEN-LAST:event_saveItemActionPerformed
    
    /**
     * La classe {@link #openItemActionPerformed(java.awt.event.ActionEvent)}
     * permet à l'utilisateur d'ouvrir un fichier existant graçe à l'item : {@link #openItem}
     * @param evt correspond au ActionEvent utilisé.
     */
    private void openItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openItemActionPerformed
        /* Dans le cas où l'utilisateur a procéder à des modifications au fichier courant. */
        if(!initialTextBox.equals(textBoxArea.getText())) {
            int n = saveShowOptionDialog();
            
            /* Dans le cas où l'utilisateur souhaite enregistrer les modifications avant d'ouvrir un nouveau fichier. */
            if(n == JOptionPane.YES_OPTION) {
                save();
                int res = 0;
                JFileChooser chooser = new JFileChooser();
                
                openShowOptionDialog(res, chooser);
                
                /* Dans le cas où l'utilisateur choisit le nouveau fichier à ouvrir. */
                if(chooser.getSelectedFile() != null) {
                    initialFile = chooser.getSelectedFile();
                    
                    while(!initialFile.canRead()) {
                        fileNotExistShowOptionDialog();
                        openShowOptionDialog(res, chooser);
                        initialFile = chooser.getSelectedFile();
                    }
                    
                    try {
                        textBoxArea.read(new FileReader(initialFile.getAbsoluteFile()), null);
                        
                        
                    } catch(IOException ex) {
                        System.out.println("Erreur : impossible d'accéder au fichier " + initialFile.getAbsolutePath());
                    }
                    
                    initializationOfFile();
                }
                /* Dans le cas où l'utilisateur décide d'annuler l'ouverture d'un nouveau fichier. */
                else {
                    System.out.println("Opération d'ouverture de fichier annulé.");
                }
            }
            /* Dans le cas où l'utilisateur décide de ne pas pas enregistrer les modifications apportées au fichier courant. */
            else if(n == JOptionPane.NO_OPTION) {
                
                int res = 0;
                JFileChooser chooser = new JFileChooser();
                
                openShowOptionDialog(res, chooser);

                /* Dans le cas où l'utilisateur choisit le nouveau fichier à ouvrir. */
                if(chooser.getSelectedFile() != null) {
                    initialFile = chooser.getSelectedFile();
                    
                    while(!initialFile.canRead()) {
                        fileNotExistShowOptionDialog();
                        openShowOptionDialog(res, chooser);
                        initialFile = chooser.getSelectedFile();
                    }

                    try {
                        textBoxArea.read(new FileReader(initialFile.getAbsoluteFile()), null);
                    } catch(IOException ex) {
                        System.out.println("Erreur : impossible d'accéder au fichier " + initialFile.getAbsolutePath());
                    }
                    
                    initializationOfFile();
                } 
                /* Dans le cas où l'utilisateur décide d'annuler l'ouverture d'un nouveau fichier. */
                else {
                    System.out.println("Opération d'ouverture de fichier annulé.");
                }
            }
            
            
        }
        /* Si l'utilisateur n'a pas procéder à des modifications au fichier courant. */
        else if(initialTextBox.equals(textBoxArea.getText())) {
            int res = 0;
            JFileChooser chooser = new JFileChooser();

            openShowOptionDialog(res, chooser);

            /* Dans le cas où l'utilisateur choisit le nouveau fichier à ouvrir. */
            if(chooser.getSelectedFile() != null) {
                initialFile = chooser.getSelectedFile();
                
                while(!initialFile.canRead()) {
                    fileNotExistShowOptionDialog();
                    openShowOptionDialog(res, chooser);
                    initialFile = chooser.getSelectedFile();
                }
                
                try {
                    textBoxArea.read(new FileReader(initialFile.getAbsoluteFile()), null);
                } catch(IOException ex) {
                    System.out.println("problem accessing file" + initialFile.getAbsolutePath());
                }
                initializationOfFile();
            } 
            /* Dans le cas où l'utilisateur décide d'annuler l'ouverture d'un nouveau fichier. */
            else {
                System.out.println("Opération d'ouverture annulé.");
            }
        }
    }//GEN-LAST:event_openItemActionPerformed

    /**
     * La classe {@link #saveAsItemActionPerformed(java.awt.event.ActionEvent)}
     * permet d'enregistrer les modfications d'un fichier qui n'existe graçe à la
     * méthode : {@link #saveAs()}.
     * @param evt correspond au ActionEvent utilisé.
     */
    private void saveAsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsItemActionPerformed
        saveAs();
    }//GEN-LAST:event_saveAsItemActionPerformed

    /**
     * La classe {@link #textBoxAreaCaretUpdate(javax.swing.event.CaretEvent)}
     *      - permet qu'à chaque caractère tapé, une vérification pour savoir si la nouvelle
     *        version du texte a bien été enregistrée. Si ce n'est pas le cas "*"
     *        s'ajoute au titre de la fenêtre.
     *      - permet de mettre à jour le numéro de la ligne ainsi que le numéro de la
     *        colonne sur le label : {@link #lblColRow}
     * @param evt correspond au CaretEvent utilisé.
     */
    private void textBoxAreaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_textBoxAreaCaretUpdate
        
        int caretPos = textBoxArea.getCaretPosition();
        int rowNum = (caretPos == 0) ? 1 : 0; /* Variable correspondant au numéro de la ligne du caret */
        for(int offset = caretPos; offset > 0; ) {
            try {
                offset = Utilities.getRowStart(textBoxArea, offset) - 1;
            } catch (BadLocationException ex) {
                Logger.getLogger(BlocNotes.class.getName()).log(Level.SEVERE, null, ex);
            }
            rowNum++;
        }
        
        int offset = 0;
        try {
            offset = Utilities.getRowStart(textBoxArea, caretPos);
        } catch (BadLocationException ex) {
            Logger.getLogger(BlocNotes.class.getName()).log(Level.SEVERE, null, ex);
        }
        int colNum = caretPos - offset + 1; /* Variable correspondant au numéro de la colonne du caret */
        
        lblColRow.setText("Ln " + rowNum + ", Col " + colNum);
        
        /* Verification de la nouvelle version du texte */
        if(!initialTextBox.equals(textBoxArea.getText())) {
            setTitle("*" + fileTitle + frameTitle);
        }
        else{
            setTitle(fileTitle + frameTitle);
        }
    }//GEN-LAST:event_textBoxAreaCaretUpdate

    /**
     * La classe {@link #leaveItemActionPerformed(java.awt.event.ActionEvent)} permet
     * de quitter la fenêtre graçe à l'item : {@link #leaveItem}
     * @param evt correspond au ActionEvent utilisé.
     */
    private void leaveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leaveItemActionPerformed
        /* Dans le cas où le texte contient des modifications. */
        if(!initialTextBox.equals(textBoxArea.getText())) {
            int n = saveShowOptionDialog();
            
            /* Dans le cas où l'utilisateur décide d'enregistrer les modifications avant de fermer la fenêtre. */
            if(n == JOptionPane.YES_OPTION) {
                save();
                this.dispose();
            }
            /* Dans le cas où l'utilisateur décide de ne pas enregistrer les modifications avant de fermer la fenêtre. */
            else if (n == JOptionPane.NO_OPTION) {
                this.dispose();
            }
            /* Dans le cas où l'utilisateur décide d'annuler l'opération de quitter la fenêtre. */
            else {
                System.out.println("Opération de sortie du frame annulé.");
            }
        }
        /* Dans le cas où le texte ne possède pas de modification. */
        else {
            this.dispose();
        }
    }//GEN-LAST:event_leaveItemActionPerformed

    /**
     * La classe {@link #cutItemActionPerformed(java.awt.event.ActionEvent)}
     * permet de couper une séléction du texte.
     * @param evt correspond au ActionEvent utilisé.
     */
    private void cutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutItemActionPerformed
        if(evt.getSource() == cutItem)
            textBoxArea.cut();
    }//GEN-LAST:event_cutItemActionPerformed
    
    /**
     * La classe {@link #copyItemActionPerformed(java.awt.event.ActionEvent)}
     * permet de copier une séléction du texte.
     * @param evt correspond au ActionEvent utilisé.
     */
    private void copyItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyItemActionPerformed
        if(evt.getSource() == copyItem)
            textBoxArea.copy();
    }//GEN-LAST:event_copyItemActionPerformed
    
    /**
     * La classe {@link #pasteItemActionPerformed(java.awt.event.ActionEvent)}
     * permet de coller une séléction copier.
     * @param evt correspond au ActionEvent utilisé.
     */
    private void pasteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteItemActionPerformed
        if(evt.getSource() == pasteItem)
            textBoxArea.paste();
    }//GEN-LAST:event_pasteItemActionPerformed
    
    /**
     * La classe {@link #deleteItemActionPerformed(java.awt.event.ActionEvent)}
     * permet de supprimer une séléction du texte.
     * @param evt correspond au ActionEvent utilisé.
     */
    private void deleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteItemActionPerformed
        if(evt.getSource() == deleteItem)
            textBoxArea.cut();
    }//GEN-LAST:event_deleteItemActionPerformed
    
    /**
     * La classe {@link #selectAllItemActionPerformed(java.awt.event.ActionEvent)}
     * permet de séléctionner l'ensemble du texte.
     * @param evt correspond au ActionEvent utilisé.
     */
    private void selectAllItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllItemActionPerformed
        if(evt.getSource() == selectAllItem)
            textBoxArea.selectAll();
    }//GEN-LAST:event_selectAllItemActionPerformed
    
    /**
     * La classe {@link #hourDateItemActionPerformed(java.awt.event.ActionEvent)}
     * d'insérer dans la zone de texte l'heure et la date courante à l'emplacement
     * du caret.
     * @param evt correspond au ActionEvent utilisé.
     */
    private void hourDateItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hourDateItemActionPerformed
        if(evt.getSource() == hourDateItem) {
            Date d = new Date();
            SimpleDateFormat ff = new SimpleDateFormat("hh:mm dd/mm/yyyy");
            textBoxArea.insert(ff.format(d), textBoxArea.getCaretPosition());
        }
    }//GEN-LAST:event_hourDateItemActionPerformed

    /**
     * La classe {@link #lineWrapItemActionPerformed(java.awt.event.ActionEvent)}
     * permet de retourner automatiquement à la ligne si le JCheckBox {@link #lineWrapItem} est séléctionner.
     * @param evt correspond au ActionEvent utilisé.
     */
    private void lineWrapItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineWrapItemActionPerformed
        if(lineWrapItem.isSelected())
            textBoxArea.setLineWrap(true);
        else
            textBoxArea.setLineWrap(false);
    }//GEN-LAST:event_lineWrapItemActionPerformed
    
    /**
     * La classe {@link #statusBarItemActionPerformed(java.awt.event.ActionEvent) }
     * permet d'afficher la barre d'état si le JCheckBox {@link #statusBarItem} est séléctionner.
     * @param evt correspond au ActionEvent utilisé.
     */
    private void statusBarItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusBarItemActionPerformed
        if(statusBarItem.isSelected()) {
            panelBottom2.setVisible(true);
        }
        else {
            panelBottom2.setVisible(false);
        }
    }//GEN-LAST:event_statusBarItemActionPerformed

    /**
     * La classe {@link #formWindowClosing(java.awt.event.WindowEvent)}
     * permet de : - demander à l'utilisateur de confirmer le choix de fermer la fenêtre.
     *             - fermer la fenêtre sans confirmation si aucun texte n'a été modifié.
     * @param evt correspond au WindowEvent utilisé.
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        /* Dans le cas où le texte possède des modifications non enregistrées. */
        if(!initialTextBox.equals(textBoxArea.getText())) {
            int n = saveShowOptionDialog();

            /* Dans le cas où l'utilisateur souhaite enregistrer ces modifications avant de fermer la fenêtre. */
            if(n == JOptionPane.YES_OPTION) {
                save();
                this.dispose();
            }
            /* Dans le cas où l'utilisateur ne souhaite pas enregistrer ces modifications avant de fermer la fenêtre. */
            else if (n == JOptionPane.NO_OPTION) {
                this.dispose();
            }
            /* Dans le cas où l'utilisateur souhaite annuler l'opération de quitter la fenêtre. */
            else {
                System.out.println("Opération de sortie du frame annulé.");
            }
        }
        /* Dans le cas où le texte ne possède pas de modification. */
        else {
            this.dispose();
        }
    }//GEN-LAST:event_formWindowClosing
// </editor-fold>
    
// <editor-fold defaultstate="collapsed" desc="MAIN">
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BlocNotes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BlocNotes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BlocNotes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BlocNotes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new BlocNotes().setVisible(true);
        });
    }
// </editor-fold>

// <editor-fold defaultstate="collapsed" desc="VARIABLES">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem cancelItem;
    private javax.swing.JMenuItem copyItem;
    private javax.swing.JMenuItem cutItem;
    private javax.swing.JMenuItem deleteItem;
    private javax.swing.JMenuItem displayHelpItem;
    private javax.swing.JMenu displayItem;
    private javax.swing.JMenu editItem;
    private javax.swing.JMenu fileItem;
    private javax.swing.JMenu formatItem;
    private javax.swing.JMenu helpItem;
    private javax.swing.JMenuItem hourDateItem;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JMenuItem layoutItem;
    private javax.swing.JLabel lblCarriageReturnLineFeed;
    private javax.swing.JLabel lblCharacterEncoding;
    private javax.swing.JLabel lblColRow;
    private javax.swing.JLabel lblZoom;
    private javax.swing.JMenuItem leaveItem;
    private javax.swing.JCheckBoxMenuItem lineWrapItem;
    private javax.swing.JMenuItem newFileItem;
    private javax.swing.JMenuItem newWindowItem;
    private javax.swing.JMenuItem openItem;
    private javax.swing.JPanel panelBottom2;
    private javax.swing.JPanel panelBottom3;
    private javax.swing.JPanel panelBottom4;
    private javax.swing.JPanel panelBottom5;
    private javax.swing.JPanel panelBottom7;
    private javax.swing.JScrollPane panelScrollTextBox;
    private javax.swing.JPanel panelTextBox;
    private javax.swing.JMenuItem pasteItem;
    private javax.swing.JMenuItem policeItem;
    private javax.swing.JMenuItem printItem;
    private javax.swing.JMenuItem reachItemItem;
    private javax.swing.JMenuItem replaceItem;
    private javax.swing.JMenuItem saveAsItem;
    private javax.swing.JMenuItem saveItem;
    private javax.swing.JMenuItem searchItem;
    private javax.swing.JMenuItem searchNextItem;
    private javax.swing.JMenuItem searchPreviousItem;
    private javax.swing.JMenuItem searchWithBingItem;
    private javax.swing.JMenuItem selectAllItem;
    private javax.swing.JMenuItem sendCommentItem;
    private javax.swing.JCheckBoxMenuItem statusBarItem;
    private javax.swing.JTextArea textBoxArea;
    private javax.swing.JMenuItem timelyItem;
    private javax.swing.JMenuBar toolbar;
    private javax.swing.JMenu zoomItem;
    // End of variables declaration//GEN-END:variables
// </editor-fold>
}